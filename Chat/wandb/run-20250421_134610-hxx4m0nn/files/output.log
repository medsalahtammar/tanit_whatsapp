Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 42, column: 21, offset: 1628} for query: 'CALL db.index.vector.queryNodes($vector_index_name, $top_k, $query_vector) YIELD node, score \n// Case 1: Embedding linked to SectionPart\nOPTIONAL MATCH (node)<-[:HAS_EMBEDDING]-(section_part:SectionPart)\nOPTIONAL MATCH (section_part)-[:HAS_ENTITY]->(section_entity:Entity)\n\n// Previous and next SectionParts based on sequence\nOPTIONAL MATCH (prev_section_part:SectionPart {authors: section_part.authors})\n  WHERE prev_section_part.sequence = section_part.sequence - 1\nOPTIONAL MATCH (next_section_part:SectionPart {authors: section_part.authors})\n  WHERE next_section_part.sequence = section_part.sequence + 1\n\n// Case 2: Embedding linked to Entity\nOPTIONAL MATCH (node)<-[:HAS_EMBEDDING]-(entity:Entity)\nOPTIONAL MATCH (entity)-[rel]->(related_entity:Entity)\n\n// Aggregate entities and relationships\nWITH \n  section_part,\n  prev_section_part,\n  next_section_part,\n  entity,\n  collect({\n    name: section_entity.name,\n    cui: section_entity.cui,\n    semantic_type: section_entity.semantic_type,\n    definitions: [key IN keys(section_entity) WHERE key STARTS WITH "definition_" AND section_entity[key] IS NOT NULL | section_entity[key]],\n    relationship: "HAS_ENTITY"\n  }) AS section_entities,\n  collect({\n    name: related_entity.name,\n    cui: related_entity.cui,\n    semantic_type: related_entity.semantic_type,\n    definitions: [key IN keys(related_entity) WHERE key STARTS WITH "definition_" AND related_entity[key] IS NOT NULL | related_entity[key]],\n    relationship: type(rel)\n  }) AS related_entities\n\n// Return clean results\nRETURN\nCASE \n  WHEN section_part IS NOT NULL THEN {\n    section_part: {\n      starting_id : ID(section_part),\n      text: section_part.text,\n      title: section_part.title,\n      doi: section_part.doi,\n      sequence: section_part.sequence,\n      entities: [entity IN section_entities WHERE entity.name IS NOT NULL]\n    },\n    previous_section_part: CASE \n      WHEN prev_section_part IS NOT NULL THEN {\n        text: prev_section_part.text,\n        doi: prev_section_part.doi,\n        sequence: prev_section_part.sequence\n      }\n      ELSE NULL\n    END,\n    next_section_part: CASE \n      WHEN next_section_part IS NOT NULL THEN {\n        text: next_section_part.text,\n        doi: next_section_part.doi,\n        sequence: next_section_part.sequence\n      }\n      ELSE NULL\n    END\n  }\n  ELSE NULL\nEND AS section_part_details,\n\nCASE \n  WHEN entity IS NOT NULL THEN {\n    entity: {\n      starting_id : ID(entity),\n      name: entity.name,\n      cui: entity.cui,\n      semantic_type: entity.semantic_type,\n      definitions: [key IN keys(entity) WHERE key STARTS WITH "definition_" AND entity[key] IS NOT NULL | entity[key]],\n      related_entities: [rel IN related_entities WHERE rel.name IS NOT NULL]\n    }\n  }\n  ELSE NULL\nEND AS entity_details\n'
Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 72, column: 21, offset: 2440} for query: 'CALL db.index.vector.queryNodes($vector_index_name, $top_k, $query_vector) YIELD node, score \n// Case 1: Embedding linked to SectionPart\nOPTIONAL MATCH (node)<-[:HAS_EMBEDDING]-(section_part:SectionPart)\nOPTIONAL MATCH (section_part)-[:HAS_ENTITY]->(section_entity:Entity)\n\n// Previous and next SectionParts based on sequence\nOPTIONAL MATCH (prev_section_part:SectionPart {authors: section_part.authors})\n  WHERE prev_section_part.sequence = section_part.sequence - 1\nOPTIONAL MATCH (next_section_part:SectionPart {authors: section_part.authors})\n  WHERE next_section_part.sequence = section_part.sequence + 1\n\n// Case 2: Embedding linked to Entity\nOPTIONAL MATCH (node)<-[:HAS_EMBEDDING]-(entity:Entity)\nOPTIONAL MATCH (entity)-[rel]->(related_entity:Entity)\n\n// Aggregate entities and relationships\nWITH \n  section_part,\n  prev_section_part,\n  next_section_part,\n  entity,\n  collect({\n    name: section_entity.name,\n    cui: section_entity.cui,\n    semantic_type: section_entity.semantic_type,\n    definitions: [key IN keys(section_entity) WHERE key STARTS WITH "definition_" AND section_entity[key] IS NOT NULL | section_entity[key]],\n    relationship: "HAS_ENTITY"\n  }) AS section_entities,\n  collect({\n    name: related_entity.name,\n    cui: related_entity.cui,\n    semantic_type: related_entity.semantic_type,\n    definitions: [key IN keys(related_entity) WHERE key STARTS WITH "definition_" AND related_entity[key] IS NOT NULL | related_entity[key]],\n    relationship: type(rel)\n  }) AS related_entities\n\n// Return clean results\nRETURN\nCASE \n  WHEN section_part IS NOT NULL THEN {\n    section_part: {\n      starting_id : ID(section_part),\n      text: section_part.text,\n      title: section_part.title,\n      doi: section_part.doi,\n      sequence: section_part.sequence,\n      entities: [entity IN section_entities WHERE entity.name IS NOT NULL]\n    },\n    previous_section_part: CASE \n      WHEN prev_section_part IS NOT NULL THEN {\n        text: prev_section_part.text,\n        doi: prev_section_part.doi,\n        sequence: prev_section_part.sequence\n      }\n      ELSE NULL\n    END,\n    next_section_part: CASE \n      WHEN next_section_part IS NOT NULL THEN {\n        text: next_section_part.text,\n        doi: next_section_part.doi,\n        sequence: next_section_part.sequence\n      }\n      ELSE NULL\n    END\n  }\n  ELSE NULL\nEND AS section_part_details,\n\nCASE \n  WHEN entity IS NOT NULL THEN {\n    entity: {\n      starting_id : ID(entity),\n      name: entity.name,\n      cui: entity.cui,\n      semantic_type: entity.semantic_type,\n      definitions: [key IN keys(entity) WHERE key STARTS WITH "definition_" AND entity[key] IS NOT NULL | entity[key]],\n      related_entities: [rel IN related_entities WHERE rel.name IS NOT NULL]\n    }\n  }\n  ELSE NULL\nEND AS entity_details\n'
--- Similar Node 1 ---
### Entity Details
- **Name**: Ethics Committees, Research
- **CUI**: C0086911
- **Semantic Type**: Professional or Occupational Group; Human
- **Definitions**:
  - A specially constituted independent review body comprised of medical, scientific and non-scientific members established and designated by an entity to ensure the protection of the rights, safety and well-being of human subjects recruited to participate in biomedical or behavioral research according to the requirements outlined in Title 38, part 16 (same as Title 45, part 46 and Title 21, part 56) of the U.S. Code of Federal Regulations. IRB responsibility include but not limited to the reviewing, approving, and providing continuing review of trial protocol and amendments and of the methods and material(s) to be used in obtaining and documenting informed consent of the trial. Other equivalent committees with the same or similar functions are also considered to be IRBs.
  - Hospital or other institutional committees established to protect the welfare of research subjects. Federal regulations (the "Common Rule" (45 CFR 46)) mandate the use of these committees to monitor federally-funded biomedical and behavioral research involving human subjects.
- **Related Entities**:
  - **Name**: RAB3D gene
    - **CUI**: C1419208
    - **Relationship**: LOCATION_OF
  - **Name**: RAB3D gene
    - **CUI**: C1419208
    - **Relationship**: LOCATION_OF


--- Similar Node 2 ---
No results found.
Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 42, column: 21, offset: 1628} for query: 'CALL db.index.vector.queryNodes($vector_index_name, $top_k, $query_vector) YIELD node, score \n// Case 1: Embedding linked to SectionPart\nOPTIONAL MATCH (node)<-[:HAS_EMBEDDING]-(section_part:SectionPart)\nOPTIONAL MATCH (section_part)-[:HAS_ENTITY]->(section_entity:Entity)\n\n// Previous and next SectionParts based on sequence\nOPTIONAL MATCH (prev_section_part:SectionPart {authors: section_part.authors})\n  WHERE prev_section_part.sequence = section_part.sequence - 1\nOPTIONAL MATCH (next_section_part:SectionPart {authors: section_part.authors})\n  WHERE next_section_part.sequence = section_part.sequence + 1\n\n// Case 2: Embedding linked to Entity\nOPTIONAL MATCH (node)<-[:HAS_EMBEDDING]-(entity:Entity)\nOPTIONAL MATCH (entity)-[rel]->(related_entity:Entity)\n\n// Aggregate entities and relationships\nWITH \n  section_part,\n  prev_section_part,\n  next_section_part,\n  entity,\n  collect({\n    name: section_entity.name,\n    cui: section_entity.cui,\n    semantic_type: section_entity.semantic_type,\n    definitions: [key IN keys(section_entity) WHERE key STARTS WITH "definition_" AND section_entity[key] IS NOT NULL | section_entity[key]],\n    relationship: "HAS_ENTITY"\n  }) AS section_entities,\n  collect({\n    name: related_entity.name,\n    cui: related_entity.cui,\n    semantic_type: related_entity.semantic_type,\n    definitions: [key IN keys(related_entity) WHERE key STARTS WITH "definition_" AND related_entity[key] IS NOT NULL | related_entity[key]],\n    relationship: type(rel)\n  }) AS related_entities\n\n// Return clean results\nRETURN\nCASE \n  WHEN section_part IS NOT NULL THEN {\n    section_part: {\n      starting_id : ID(section_part),\n      text: section_part.text,\n      title: section_part.title,\n      doi: section_part.doi,\n      sequence: section_part.sequence,\n      entities: [entity IN section_entities WHERE entity.name IS NOT NULL]\n    },\n    previous_section_part: CASE \n      WHEN prev_section_part IS NOT NULL THEN {\n        text: prev_section_part.text,\n        doi: prev_section_part.doi,\n        sequence: prev_section_part.sequence\n      }\n      ELSE NULL\n    END,\n    next_section_part: CASE \n      WHEN next_section_part IS NOT NULL THEN {\n        text: next_section_part.text,\n        doi: next_section_part.doi,\n        sequence: next_section_part.sequence\n      }\n      ELSE NULL\n    END\n  }\n  ELSE NULL\nEND AS section_part_details,\n\nCASE \n  WHEN entity IS NOT NULL THEN {\n    entity: {\n      starting_id : ID(entity),\n      name: entity.name,\n      cui: entity.cui,\n      semantic_type: entity.semantic_type,\n      definitions: [key IN keys(entity) WHERE key STARTS WITH "definition_" AND entity[key] IS NOT NULL | entity[key]],\n      related_entities: [rel IN related_entities WHERE rel.name IS NOT NULL]\n    }\n  }\n  ELSE NULL\nEND AS entity_details\n'
Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 72, column: 21, offset: 2440} for query: 'CALL db.index.vector.queryNodes($vector_index_name, $top_k, $query_vector) YIELD node, score \n// Case 1: Embedding linked to SectionPart\nOPTIONAL MATCH (node)<-[:HAS_EMBEDDING]-(section_part:SectionPart)\nOPTIONAL MATCH (section_part)-[:HAS_ENTITY]->(section_entity:Entity)\n\n// Previous and next SectionParts based on sequence\nOPTIONAL MATCH (prev_section_part:SectionPart {authors: section_part.authors})\n  WHERE prev_section_part.sequence = section_part.sequence - 1\nOPTIONAL MATCH (next_section_part:SectionPart {authors: section_part.authors})\n  WHERE next_section_part.sequence = section_part.sequence + 1\n\n// Case 2: Embedding linked to Entity\nOPTIONAL MATCH (node)<-[:HAS_EMBEDDING]-(entity:Entity)\nOPTIONAL MATCH (entity)-[rel]->(related_entity:Entity)\n\n// Aggregate entities and relationships\nWITH \n  section_part,\n  prev_section_part,\n  next_section_part,\n  entity,\n  collect({\n    name: section_entity.name,\n    cui: section_entity.cui,\n    semantic_type: section_entity.semantic_type,\n    definitions: [key IN keys(section_entity) WHERE key STARTS WITH "definition_" AND section_entity[key] IS NOT NULL | section_entity[key]],\n    relationship: "HAS_ENTITY"\n  }) AS section_entities,\n  collect({\n    name: related_entity.name,\n    cui: related_entity.cui,\n    semantic_type: related_entity.semantic_type,\n    definitions: [key IN keys(related_entity) WHERE key STARTS WITH "definition_" AND related_entity[key] IS NOT NULL | related_entity[key]],\n    relationship: type(rel)\n  }) AS related_entities\n\n// Return clean results\nRETURN\nCASE \n  WHEN section_part IS NOT NULL THEN {\n    section_part: {\n      starting_id : ID(section_part),\n      text: section_part.text,\n      title: section_part.title,\n      doi: section_part.doi,\n      sequence: section_part.sequence,\n      entities: [entity IN section_entities WHERE entity.name IS NOT NULL]\n    },\n    previous_section_part: CASE \n      WHEN prev_section_part IS NOT NULL THEN {\n        text: prev_section_part.text,\n        doi: prev_section_part.doi,\n        sequence: prev_section_part.sequence\n      }\n      ELSE NULL\n    END,\n    next_section_part: CASE \n      WHEN next_section_part IS NOT NULL THEN {\n        text: next_section_part.text,\n        doi: next_section_part.doi,\n        sequence: next_section_part.sequence\n      }\n      ELSE NULL\n    END\n  }\n  ELSE NULL\nEND AS section_part_details,\n\nCASE \n  WHEN entity IS NOT NULL THEN {\n    entity: {\n      starting_id : ID(entity),\n      name: entity.name,\n      cui: entity.cui,\n      semantic_type: entity.semantic_type,\n      definitions: [key IN keys(entity) WHERE key STARTS WITH "definition_" AND entity[key] IS NOT NULL | entity[key]],\n      related_entities: [rel IN related_entities WHERE rel.name IS NOT NULL]\n    }\n  }\n  ELSE NULL\nEND AS entity_details\n'


--- Similar Node 1 ---
### Section Details
- **Title**: Intracytoplasmic sperm injection vs. conventional in vitro fertilization in patients with non-male factor infertility
- **Text**: This retrospective analysis was performed using primary IVF clinic data collected by the Society for Assisted Reproductive Technology (SART).All data were collected by SART, validated and audited annually, and reported to the Centers for Disease Control and Prevention in compliance with the Fertility Clinic Success Rate and Certification Act of 1992 (Public Law 102-493).
- **DOI**: 10.1016/j.fertnstert.2022.06.009
- **Sequence**: 5
### Previous Section
- **Text**: Although many studies have shown that ICSI is not beneficial in cases of non-male factor infertility, it has continued to be used at high rates, and its effect on cumulative live birth rates (CLBRs) has not been studied in a large US population.It is possible that while using ICSI, CLBR might be impaired because only fully mature oocytes are inseminated, thus decreasing the pool of oocytes with potential for embryo development, whereas with standard insemination techniques, oocytes at various stages of maturation are inseminated (5) .There has also been a lack of cost analyses assessing the financial implications of this additional procedure.The purpose of our study was to assess CLBR while using ICSI vs. cIVF based on recent national data and perform a cost analysis comparing the 2 fertilization methods.We hypothesized that there is no improvement in CLBR when ICSI vs. cIVF is used in couples with non-male factor infertility.
- **DOI**: 10.1016/j.fertnstert.2022.06.009
- **Sequence**: 4
### Next Section
- **Text**: The dataset included patients who underwent their first IVF autologous retrieval cycle between January 2014 and December 2015.We linked subsequent fresh and frozen embryo transfers occurring through December 2016 that used only embryos from the initial retrieval cycle to determine the CLBR.Cycles that included embryos from multiple retrieval cycles were excluded.Patients who used ''some ICSI,'' with missing ICSI data, who underwent single-gene analysis or genetic testing other than preimplantation genetic testing for aneuploidy (PGT-A), who were reported to have undergone PGT-A and a cleavage-stage embryo transfer or had missing data on genetic testing were excluded (Fig. 1 ).Patients with a diagnosis of male factor infertility, those who used donor sperm, and those who used frozen oocytes from the index cycle in a subsequent transfer cycle were also excluded.Although SART considers unknown outcomes as negative outcomes, this study excluded all cycles with unknown outcomes.Separate analyses of cycles that used ICSI vs. cIVF with no genetic testing or with PGT-A were performed.
- **DOI**: 10.1016/j.fertnstert.2022.06.009
- **Sequence**: 6


--- Similar Node 2 ---
### Section Details
- **Title**: A higher number of oocytes retrieved is associated with an increase in fertilized oocytes, blastocysts, and cumulative live birth rates
- **Text**: The data in the SART CORS are validated annually with 7%-10% of clinics receiving on-site visits for chart review on the basis of an algorithm for clinic selection.During each visit, data reported by the clinic were compared with information recorded in patients' charts.In 2019, records for 2,014 cycles at 34 clinics were randomly selected for full validation, along with 213 fertility preservation cycles selected for partial validation.The full validation included review of 1,300 cycles for which a pregnancy was reported.Nine of 11 data fields selected for validation were found to have discrepancy rates of %5% (15) .The exceptions were the diagnosis field, which, depending on the diagnosis, had a discrepancy rate between 2.5% and 17.8%, and the start date, which had a discrepancy rate of 8.4%.Obstetric outcomes from Massachusetts assisted reproductive technology records during 2004-2008 have been validated to have >95% agreement with vital records (16) .
- **DOI**: 10.1016/j.fertnstert.2023.01.001
- **Sequence**: 8
### Previous Section
- **Text**: This was a retrospective study using autologous IVF retrieval cycles (IVF, oocyte banking, and embryo banking cycles) and linked FETs from IVF clinics in the United States between 2014 and 2019.The data used for this study were obtained from the SART CORS.Data were collected through voluntary submission, verified by the SART, and reported to the Centers for Disease Control and Prevention (CDC) in compliance with the Fertility Clinic Success Rate and Certification Act of 1992 (Public Law 102-493).The SART maintains Health Insurance Portability and Accountability Act-compliant business associate agreements with reporting clinics.In 2004, after a contract change with the CDC, the SART gained access to the SART CORS data system for the purposes of conducting research.In 2017, 82% of all assisted reproductive technology clinics in the United States were SART members (15) .
- **DOI**: 10.1016/j.fertnstert.2023.01.001
- **Sequence**: 7
### Next Section
- **Text**: A total of 1,283,131 retrieval cycles and FETs were retrieved from the SART CORS database.Retrieval cycles were excluded from analysis if they were missing baseline anti-m€ ullerian hormone (AMH) or body mass index (BMI).Cancelled cycles where egg retrieval was not attempted were also excluded.Furthermore, cycles where the number of 2PNs exceeded the number of oocytes retrieved were excluded.In total, 402,411 retrieval cycles were included in the study, from 296,409 patients.For retrieval cycles with blastocyst-stage embryo transfers (n ¼ 173,066), the number of total blastocysts was calculated as the sum of the number of transferred and frozen embryos.
- **DOI**: 10.1016/j.fertnstert.2023.01.001
- **Sequence**: 9


--- Similar Node 3 ---
### Section Details
- **Title**: A higher number of oocytes retrieved is associated with an increase in fertilized oocytes, blastocysts, and cumulative live birth rates
- **Text**: This was a retrospective study using autologous IVF retrieval cycles (IVF, oocyte banking, and embryo banking cycles) and linked FETs from IVF clinics in the United States between 2014 and 2019.The data used for this study were obtained from the SART CORS.Data were collected through voluntary submission, verified by the SART, and reported to the Centers for Disease Control and Prevention (CDC) in compliance with the Fertility Clinic Success Rate and Certification Act of 1992 (Public Law 102-493).The SART maintains Health Insurance Portability and Accountability Act-compliant business associate agreements with reporting clinics.In 2004, after a contract change with the CDC, the SART gained access to the SART CORS data system for the purposes of conducting research.In 2017, 82% of all assisted reproductive technology clinics in the United States were SART members (15) .
- **DOI**: 10.1016/j.fertnstert.2023.01.001
- **Sequence**: 7
### Previous Section
- **Text**: This study was conducted after the research protocol approved by WCG IRB (study no.1308073) and the SART Research Committee.
- **DOI**: 10.1016/j.fertnstert.2023.01.001
- **Sequence**: 6
### Next Section
- **Text**: The data in the SART CORS are validated annually with 7%-10% of clinics receiving on-site visits for chart review on the basis of an algorithm for clinic selection.During each visit, data reported by the clinic were compared with information recorded in patients' charts.In 2019, records for 2,014 cycles at 34 clinics were randomly selected for full validation, along with 213 fertility preservation cycles selected for partial validation.The full validation included review of 1,300 cycles for which a pregnancy was reported.Nine of 11 data fields selected for validation were found to have discrepancy rates of %5% (15) .The exceptions were the diagnosis field, which, depending on the diagnosis, had a discrepancy rate between 2.5% and 17.8%, and the start date, which had a discrepancy rate of 8.4%.Obstetric outcomes from Massachusetts assisted reproductive technology records during 2004-2008 have been validated to have >95% agreement with vital records (16) .
- **DOI**: 10.1016/j.fertnstert.2023.01.001
- **Sequence**: 8
